stages:
  - build
  - test
  - publish
  - trigger

include:
  - project: "Northern.tech/Mender/mendertesting"
    file: ".gitlab-ci-check-golang-lint.yml"
  - project: "Northern.tech/Mender/mendertesting"
    file: ".gitlab-ci-github-status-updates.yml"
  - project: "Northern.tech/Mender/mendertesting"
    file: ".gitlab-ci-check-commits.yml"
  - project: "Northern.tech/Mender/mendertesting"
    file: ".gitlab-ci-check-license.yml"

image: golang:1.18-alpine3.16

cache:
  paths:
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in

variables:
  DOCKER_REPOSITORY: mendersoftware/mender-artifact
  S3_BUCKET_NAME: "mender"
  S3_BUCKET_PATH: "mender-artifact"
  DOCKER_BUILDKIT: 1

build:docker:
  image: docker
  needs: []
  services:
    - docker:dind
  stage: build
  script:
    - docker build -t $DOCKER_REPOSITORY:pr .
    - docker save $DOCKER_REPOSITORY:pr > image.tar
  artifacts:
    expire_in: 2w
    paths:
      - image.tar
  tags:
    - docker

build:make:
  image: docker
  needs: []
  services:
    - docker:dind
  before_script:
    - apk add --no-cache make
  stage: build
  script:
    - make build-natives-contained
  artifacts:
    expire_in: 2w
    paths:
      - mender-artifact-*
  tags:
    - mender-qa-slave
  variables:
    # Docker dind configuration for mender-qa-slave
    DOCKER_HOST: "tcp://docker:2376"
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_TLS_VERIFY: "1"
    DOCKER_TLS_CERTDIR: "/certs"

build:docker-multiplatform:
  tags:
    - mender-qa-worker-generic-light
  stage: build
  needs: []
  variables:
    DOCKER_BUILDKIT: 1
    MULTIPLATFORM_PLATFORMS: "linux/arm64"
  image: "registry.gitlab.com/northern.tech/mender/mender-test-containers:docker-multiplatform-buildx-v1-master"
  services:
    - docker:20.10.21-dind
  script:
    - echo "building the arm64 version for the ${CI_PROJECT_NAME}"
    - docker context create builder
    - docker buildx create builder --use --driver-opt network=host --buildkitd-flags '--debug --allow-insecure-entitlement network.host'
    - docker buildx build
      --tag local
      --file ${DOCKER_DIR:-.}/${DOCKERFILE:-Dockerfile}
      --platform "linux/arm64,linux/amd64"
      --output /tmp/multiplatform
      ${DOCKER_DIR:-.}
    - mv /tmp/multiplatform/linux_arm64/go/bin/mender-artifact mender-artifact-linux-arm64
  artifacts:
    expire_in: 2w
    paths:
      - mender-artifact-linux-arm64


test:smoketests:mac:
  stage: test
  needs:
    - job: build:make
      artifacts: true
  script:
    - touch test.txt
    - ./mender-artifact-darwin
    - ./mender-artifact-darwin --version
    - ./mender-artifact-darwin write module-image -t test -o test.mender -T script -n test -f test.txt
    - ./mender-artifact-darwin read test.mender
    - ./mender-artifact-darwin validate test.mender
    - ./mender-artifact-darwin write rootfs-image -t test -o test-rfs.mender -n test -f test.txt
    - ./mender-artifact-darwin read test-rfs.mender
    - ./mender-artifact-darwin validate test-rfs.mender
    - make build
  tags:
    - mac-runner

test:smoketests:linux:
  stage: test
  needs:
    - job: build:make
      artifacts: true
  image: golang:1.18-buster
  before_script:
    - apt-get update && apt-get install -q -y make liblzma-dev libssl-dev
    - bash tests/test_sign_with_hsm/test_sign_with_hsm.sh --setup
  script:
    - touch test.txt
    - TEST_MENDER_ARTIFACT_PATH=./mender-artifact-linux bash tests/test_sign_with_hsm/test_sign_with_hsm.sh
    - ./mender-artifact-linux
    - ./mender-artifact-linux --version
    - ./mender-artifact-linux write module-image -t test -o test.mender -T script -n test -f test.txt
    - ./mender-artifact-linux read test.mender
    - ./mender-artifact-linux validate test.mender
    - ./mender-artifact-linux write rootfs-image -t test -o test-rfs.mender -n test -f test.txt
    - ./mender-artifact-linux read test-rfs.mender
    - ./mender-artifact-linux validate test-rfs.mender
    - make build

.test:unit:
  stage: test
  needs: []

  script:
    - make coverage
    - mv coverage.txt $CI_PROJECT_DIR/$COVERAGE_FILE
  artifacts:
    expire_in: 2w
    untracked: true
    paths:
      - $COVERAGE_FILE

test:unit:linux:
  extends: .test:unit
  variables:
    COVERAGE_FILE: coverage-linux.txt
  before_script:
    - apk update && apk add git make bash dosfstools e2fsprogs e2fsprogs-extra gcc libc6-compat mtools musl-dev parted perl-utils xz-dev libressl-dev openssl-dev

test:unit:mac:
  extends: .test:unit
  variables:
    COVERAGE_FILE: coverage-mac.txt
    # This is needed because the host is reusing the workdir, it is not a Docker
    # runner.
    GIT_STRATEGY: clone
  tags:
    - mac-runner

publish:tests:
  stage: publish
  image: golang:1.14-alpine3.11
  needs:
    - job: test:unit:linux
      artifacts: true
    - job: test:unit:mac
      artifacts: true
  variables:
    COVERALLS_WEBHOOK_URL: "https://coveralls.io/webhook"
  before_script:
    - apk add --no-cache git curl
    # Run go get out of the repo to not modify go.mod
    - cd / && go get github.com/mattn/goveralls && cd -
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH, CI_PR_NUMBER,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - export CI_BRANCH=${CI_COMMIT_BRANCH}
    - export CI_PR_NUMBER=${CI_COMMIT_BRANCH#pr_}
  script:
    # Submit coverage from all platforms.
    - for PLATFORM in linux mac; do
    - goveralls
      -repotoken ${COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $(git rev-parse HEAD)
      -parallel
      -covermode set
      -flagname unittests:$PLATFORM
      -coverprofile coverage-$PLATFORM.txt
    - done

publish:s3:
  stage: publish
  image: debian:buster
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|[0-9]+\.[0-9]+\.x)$/' 
  needs:
    - job: build:make
      artifacts: true
    - job: test:smoketests:linux
    - job: test:smoketests:mac
    - job: build:docker-multiplatform
      artifacts: true
  before_script:
    - apt update && apt install -yyq awscli
  script:
    - for bin in mender-artifact-darwin mender-artifact-linux mender-artifact-linux-arm64 mender-artifact-windows.exe; do
      platform=${bin#mender-artifact-};
      platform=${platform%.*};
      echo "Publishing ${CI_COMMIT_REF_NAME} version for ${platform} to S3";
      aws s3 cp ${bin}
      s3://$S3_BUCKET_NAME/$S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/${platform}/mender-artifact;
      aws s3api put-object-acl --acl public-read --bucket $S3_BUCKET_NAME
      --key $S3_BUCKET_PATH/${CI_COMMIT_REF_NAME}/${platform}/mender-artifact;
      done

trigger:mender-qa:
  image: alpine
  stage: trigger
  before_script:
    - apk add --no-cache git curl bash python3 py3-pip
    - pip3 install pyyaml
    - git clone https://github.com/mendersoftware/integration.git integration
    - git clone https://github.com/mendersoftware/mender-qa.git mender-qa
  script:
    - export WORKSPACE=$(pwd)
    - mender-qa/scripts/gitlab_trigger_client_publish ${CI_COMMIT_REF_NAME} ${CI_PROJECT_NAME}
  only:
    - /^(master|[0-9]+\.[0-9]+\.x)$/
